/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    pages: Page;
    components: Component;
    guides: Guide;
    categories: Category;
    versions: Version;
    users: User;
    media: Media;
    redirects: Redirect;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    settings: Settings;
    header: Header;
    footer: Footer;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  categories?: (string | Category)[] | null;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText: {
      [k: string]: unknown;
    }[];
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: string | Page;
            } | null;
            url?: string | null;
            label: string;
            appearance?: ('default' | 'primary' | 'secondary') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: string | Media | null;
  };
  layout: (
    | {
        columns?:
          | {
              size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
              content?:
                | (
                    | {
                        richText: {
                          [k: string]: unknown;
                        }[];
                        links?:
                          | {
                              link: {
                                type?: ('reference' | 'custom') | null;
                                newTab?: boolean | null;
                                reference?: {
                                  relationTo: 'pages';
                                  value: string | Page;
                                } | null;
                                url?: string | null;
                                label: string;
                                appearance?: ('primary' | 'secondary') | null;
                              };
                              id?: string | null;
                            }[]
                          | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'cta';
                      }
                    | {
                        position?: ('default' | 'fullscreen') | null;
                        media: string | Media;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'mediaBlock';
                      }
                    | {
                        richText: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'richTextBlock';
                      }
                    | {
                        code: string;
                        language: 'typescript' | 'javascript' | 'json' | 'html' | 'css';
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'codeBlock';
                      }
                    | {
                        title: string;
                        color?: ('text' | 'muted' | 'success' | 'warning' | 'danger' | 'info' | 'primary') | null;
                        richText: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'exampleBlock';
                      }
                    | {
                        title: string;
                        items?:
                          | {
                              term: string;
                              definition: {
                                [k: string]: unknown;
                              }[];
                              id?: string | null;
                            }[]
                          | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'definitionList';
                      }
                    | {
                        do: {
                          [k: string]: unknown;
                        }[];
                        dont: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'guidelinesBlock';
                      }
                  )[]
                | null;
              enableLink?: boolean | null;
              link?: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?: {
                  relationTo: 'pages';
                  value: string | Page;
                } | null;
                url?: string | null;
                label: string;
                appearance?: ('default' | 'primary' | 'secondary') | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'row';
      }
    | {
        introContent: {
          [k: string]: unknown;
        }[];
        populateBy?: ('collection' | 'selection') | null;
        relationTo?: ('guides' | 'components') | null;
        categories?: (string | Category)[] | null;
        limit?: number | null;
        selectedDocs?:
          | (
              | {
                  relationTo: 'components';
                  value: string | Component;
                }
              | {
                  relationTo: 'guides';
                  value: string | Guide;
                }
            )[]
          | null;
        populatedDocs?:
          | (
              | {
                  relationTo: 'components';
                  value: string | Component;
                }
              | {
                  relationTo: 'guides';
                  value: string | Guide;
                }
            )[]
          | null;
        populatedDocsTotal?: number | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'archive';
      }
  )[];
  slug?: string | null;
  parent?: (string | null) | Page;
  breadcrumbs?:
    | {
        doc?: (string | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title?: string | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "components".
 */
export interface Component {
  id: string;
  title: string;
  description?: string | null;
  preview?: string | Media | null;
  version: string | Version;
  component?:
    | (
        | 'studs-accordion-item'
        | 'studs-accordion'
        | 'studs-alert'
        | 'studs-avatar-group'
        | 'studs-avatar'
        | 'studs-badge'
        | 'studs-breadcrumbs'
        | 'studs-button-group'
        | 'studs-button'
        | 'studs-card'
        | 'studs-carousel'
        | 'studs-chip'
        | 'studs-divider'
        | 'studs-global-banner'
        | 'studs-grid'
        | 'studs-icon'
        | 'studs-image'
        | 'studs-list-item'
        | 'studs-list'
        | 'studs-pagination'
        | 'studs-progress'
        | 'studs-resizer'
        | 'studs-skeleton'
        | 'studs-spinner'
        | 'studs-stepper'
        | 'studs-table'
        | 'studs-tabs'
        | 'studs-toggle-button-group'
        | 'studs-toggle-button'
        | 'studs-checkbox-group'
        | 'studs-checkbox'
        | 'studs-date-picker'
        | 'studs-dropdown'
        | 'studs-error-message'
        | 'studs-file-upload'
        | 'studs-form-control'
        | 'studs-helper-text'
        | 'studs-input'
        | 'studs-label'
        | 'studs-radio-group'
        | 'studs-radio'
        | 'studs-slider'
        | 'studs-switch'
        | 'studs-textarea'
        | 'studs-app-shell'
        | 'studs-menu-item'
        | 'studs-menu-label'
        | 'studs-menu-title'
        | 'studs-menu'
        | 'studs-navbar'
        | 'studs-alert-dialog-group'
        | 'studs-alert-dialog'
        | 'studs-drawer'
        | 'studs-modal'
        | 'studs-popover'
        | 'studs-toast'
        | 'studs-toaster'
        | 'studs-tooltip'
      )
    | null;
  component_status: 'draft' | 'review' | 'published';
  category: 'display' | 'inputs' | 'navigation' | 'overlays';
  figma_link?: string | null;
  slug?: string | null;
  usage?:
    | {
        columns?:
          | {
              size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
              content?:
                | (
                    | {
                        richText: {
                          [k: string]: unknown;
                        }[];
                        links?:
                          | {
                              link: {
                                type?: ('reference' | 'custom') | null;
                                newTab?: boolean | null;
                                reference?: {
                                  relationTo: 'pages';
                                  value: string | Page;
                                } | null;
                                url?: string | null;
                                label: string;
                                appearance?: ('primary' | 'secondary') | null;
                              };
                              id?: string | null;
                            }[]
                          | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'cta';
                      }
                    | {
                        position?: ('default' | 'fullscreen') | null;
                        media: string | Media;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'mediaBlock';
                      }
                    | {
                        richText: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'richTextBlock';
                      }
                    | {
                        code: string;
                        language: 'typescript' | 'javascript' | 'json' | 'html' | 'css';
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'codeBlock';
                      }
                    | {
                        title: string;
                        color?: ('text' | 'muted' | 'success' | 'warning' | 'danger' | 'info' | 'primary') | null;
                        richText: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'exampleBlock';
                      }
                    | {
                        title: string;
                        items?:
                          | {
                              term: string;
                              definition: {
                                [k: string]: unknown;
                              }[];
                              id?: string | null;
                            }[]
                          | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'definitionList';
                      }
                    | {
                        do: {
                          [k: string]: unknown;
                        }[];
                        dont: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'guidelinesBlock';
                      }
                  )[]
                | null;
              enableLink?: boolean | null;
              link?: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?: {
                  relationTo: 'pages';
                  value: string | Page;
                } | null;
                url?: string | null;
                label: string;
                appearance?: ('default' | 'primary' | 'secondary') | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'row';
      }[]
    | null;
  stories?:
    | (
        | {
            richText: {
              [k: string]: unknown;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'richTextBlock';
          }
        | {
            code: string;
            language: 'typescript' | 'javascript' | 'json' | 'html' | 'css';
            id?: string | null;
            blockName?: string | null;
            blockType: 'codeBlock';
          }
      )[]
    | null;
  guidelines?:
    | {
        columns?:
          | {
              size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
              content?:
                | (
                    | {
                        richText: {
                          [k: string]: unknown;
                        }[];
                        links?:
                          | {
                              link: {
                                type?: ('reference' | 'custom') | null;
                                newTab?: boolean | null;
                                reference?: {
                                  relationTo: 'pages';
                                  value: string | Page;
                                } | null;
                                url?: string | null;
                                label: string;
                                appearance?: ('primary' | 'secondary') | null;
                              };
                              id?: string | null;
                            }[]
                          | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'cta';
                      }
                    | {
                        position?: ('default' | 'fullscreen') | null;
                        media: string | Media;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'mediaBlock';
                      }
                    | {
                        richText: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'richTextBlock';
                      }
                    | {
                        code: string;
                        language: 'typescript' | 'javascript' | 'json' | 'html' | 'css';
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'codeBlock';
                      }
                    | {
                        title: string;
                        color?: ('text' | 'muted' | 'success' | 'warning' | 'danger' | 'info' | 'primary') | null;
                        richText: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'exampleBlock';
                      }
                    | {
                        title: string;
                        items?:
                          | {
                              term: string;
                              definition: {
                                [k: string]: unknown;
                              }[];
                              id?: string | null;
                            }[]
                          | null;
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'definitionList';
                      }
                    | {
                        do: {
                          [k: string]: unknown;
                        }[];
                        dont: {
                          [k: string]: unknown;
                        }[];
                        id?: string | null;
                        blockName?: string | null;
                        blockType: 'guidelinesBlock';
                      }
                  )[]
                | null;
              enableLink?: boolean | null;
              link?: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?: {
                  relationTo: 'pages';
                  value: string | Page;
                } | null;
                url?: string | null;
                label: string;
                appearance?: ('default' | 'primary' | 'secondary') | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'row';
      }[]
    | null;
  parent?: (string | null) | Component;
  breadcrumbs?:
    | {
        doc?: (string | null) | Component;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "versions".
 */
export interface Version {
  id: string;
  version?: string | null;
  current?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guides".
 */
export interface Guide {
  id: string;
  title: string;
  categories?: (string | Category)[] | null;
  layout: {
    columns?:
      | {
          size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
          content?:
            | (
                | {
                    richText: {
                      [k: string]: unknown;
                    }[];
                    links?:
                      | {
                          link: {
                            type?: ('reference' | 'custom') | null;
                            newTab?: boolean | null;
                            reference?: {
                              relationTo: 'pages';
                              value: string | Page;
                            } | null;
                            url?: string | null;
                            label: string;
                            appearance?: ('primary' | 'secondary') | null;
                          };
                          id?: string | null;
                        }[]
                      | null;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'cta';
                  }
                | {
                    position?: ('default' | 'fullscreen') | null;
                    media: string | Media;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'mediaBlock';
                  }
                | {
                    richText: {
                      [k: string]: unknown;
                    }[];
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'richTextBlock';
                  }
                | {
                    code: string;
                    language: 'typescript' | 'javascript' | 'json' | 'html' | 'css';
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'codeBlock';
                  }
                | {
                    title: string;
                    color?: ('text' | 'muted' | 'success' | 'warning' | 'danger' | 'info' | 'primary') | null;
                    richText: {
                      [k: string]: unknown;
                    }[];
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'exampleBlock';
                  }
                | {
                    title: string;
                    items?:
                      | {
                          term: string;
                          definition: {
                            [k: string]: unknown;
                          }[];
                          id?: string | null;
                        }[]
                      | null;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'definitionList';
                  }
                | {
                    do: {
                      [k: string]: unknown;
                    }[];
                    dont: {
                      [k: string]: unknown;
                    }[];
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'guidelinesBlock';
                  }
              )[]
            | null;
          enableLink?: boolean | null;
          link?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: string | Page;
            } | null;
            url?: string | null;
            label: string;
            appearance?: ('default' | 'primary' | 'secondary') | null;
          };
          id?: string | null;
        }[]
      | null;
    id?: string | null;
    blockName?: string | null;
    blockType: 'row';
  }[];
  slug?: string | null;
  parent?: (string | null) | Guide;
  breadcrumbs?:
    | {
        doc?: (string | null) | Guide;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  roles?: ('admin' | 'editor' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Settings {
  id: string;
  storybookUrl?: string | null;
  githubUrl?: string | null;
  bitbucketUrl?: string | null;
  figmaUrl?: string | null;
  logo: string | Media;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}